const info = [
  {
    title: "Array Function",
    function: "_.chunk(array, [size=1])",
    title1: "Description",
    desc: `creates an array of elements split into groups the length of size. If array can't be split evenly, the final chunk will be the remaining elements.`,
    title2: "Argument",
    argument: `<strong>array (Array):</strong> The array to process. <br>
   <strong> [size=1] (number):</strong> The length of each chunk`,
    title3: "Returns",
    return: "<strong>(Array):</strong> Returns the new array of chunks.",
    title4: "Exemple",
    exemple: "./photo/Capture d’écran 2022-08-14 131332.png",
    id: "chunk",
  },
  {
    function: "_.compact(array)",
    title1: "Description",
    desc: `Creates an array with all falsey values removed. The values false, null, 0, "", undefined, and NaN are falsey.`,
    title2: "Argument",
    argument: `<strong>array (Array):</strong> The array to compact. <br>
   <strong> [size=1] (number):</strong> The length of each chunk`,
    title3: "Returns",
    return:
      "<strong>(Array):</strong> Returns the new array of filtered values..",
    title4: "Exemple",
    exemple: "./photo/compact.png",
    id: "compact",
  },
  {
    function: "_.concat(array, [values])",
    title1: "Description",
    desc: `Creates a new array concatenating array with any additional arrays and/or values.`,
    title2: "Argument",
    argument: `<strong>array (Array):</strong> The array to concatenate. <br>
   <strong> [size=1] (number):</strong> The values to concatenate.`,
    title3: "Returns",
    return: "<strong>(Array):</strong> Returns the new concatenated array.",
    title4: "Exemple",
    exemple: "./photo/concat.png",
    id: "concat",
  },
  {
    function: "_.difference(array, [values])",
    title1: "Description",
    desc: "Creates an array of array values not included in the other given arrays using SameValueZero for equality comparisons. The order and references of result values are determined by the first array.",
    title2: "Argument",
    argument: `<strong>array (Array):</strong> The array to inspect.<br>
   <strong> [size=1] (number):</strong> The values to exclude.`,
    title3: "Returns",
    return:
      "<strong>(Array):</strong>Returns the new array of filtered values.",
    title4: "Exemple",
    exemple: "./photo/difference.png",
    id: "difference",
  },
  {
    function: "_.differenceBy(array, [values], [iteratee=_.identity])",
    title1: "Description",
    desc: `This method is like _.difference except that it accepts iteratee which is invoked for each element of array and values to generate the criterion by which they're compared. The order and references of result values are determined by the first array. The iteratee is invoked with one argument:
(value).`,
    title2: "Argument",
    argument: `<strong>array (Array):</strong> The array to inspect.. <br>
   <strong> [size=1] (number):</strong> The values to exclude.`,
    title3: "Returns",
    return:
      "<strong>(Array):</strong> Returns the new array of filtered values.",
    title4: "Exemple",
    exemple: "./photo/differenceby.png",
    id: "differenceBy",
  },

  {
    function: "_.differenceWith(array, [values], [comparator])",
    title1: "Description",
    desc: `This method is like _.difference except that it accepts comparator which is invoked to compare elements of array to values. The order and references of result values are determined by the first array. The comparator is invoked with two arguments: (arrVal, othVal).`,
    title2: "Argument",
    argument: `<strong>array (Array):</strong> The array to inspect. <br>
   <strong> [size=1] (number):</strong> The values to exclude.`,
    title3: "Returns",
    return:
      "<strong>(Array):</strong> Returns the new array of filtered values.",
    title4: "Exemple",
    exemple: "./photo/differencewith.png",
    id: "differenceWith",
  },
  {
    function: "_.drop(array, [n=1])",
    title1: "Description",
    desc: `Creates a slice of array with n elements dropped from the beginning.`,
    title2: "Argument",
    argument: `<strong>array (Array):</strong>  The array to query.<br>
   <strong> [size=1] (number):</strong> The number of elements to drop.`,
    title3: "Returns",
    return: "<strong>(Array):</strong>  Returns the slice of array.",
    title4: "Exemple",
    exemple: "./photo/drop.png",
    id: "drop",
  },
  {
    function: "_.dropRight(array, [n=1])",
    title1: "Description",
    desc: `Creates a slice of array with n elements dropped from the end.`,
    title2: "Argument",
    argument: `<strong>array (Array):</strong>   The array to query.<br>
   <strong> [size=1] (number):</strong> The number of elements to drop.`,
    title3: "Returns",
    return: "<strong>(Array):</strong> Returns the slice of array.",
    title4: "Exemple",
    exemple: "./photo/dropright.png",
    id: "dropRight",
  },
  {
    function: "_.dropRightWhile(array, [predicate=_.identity])",
    title1: "Description",
    desc: `Creates a slice of array excluding elements dropped from the end. Elements are dropped until predicate returns falsey. The predicate is invoked with three arguments: (value, index, array).`,
    title2: "Argument",
    argument: `<strong>array (Array):</strong>  The array to query.<br>
   <strong> [size=1] (number):</strong> The function invoked per iteration.`,
    title3: "Returns",
    return: "<strong>(Array):</strong>  Returns the slice of array.",
    title4: "Exemple",
    exemple: "./photo/droprightwhile.png",
    id: "dropRightWhile",
  },
  {
    function: "_.dropWhile(array, [predicate=_.identity])",
    title1: "Description",
    desc: `Creates a slice of array excluding elements dropped from the beginning. Elements are dropped until predicate returns falsey. The predicate is invoked with three arguments: (value, index, array).`,
    title2: "Argument",
    argument: `<strong>array (Array):</strong>  The array to query.<br>
   <strong> [size=1] (number):</strong>  The function invoked per iteration`,
    title3: "Returns",
    return: "<strong>(Array):</strong>  Returns the slice of array.",
    title4: "Exemple",
    exemple: "./photo/dropwhile.png",
    id: "dropWhile",
  },
  {
    function: "_.fill(array, value, [start=0], [end=array.length])",
    title1: "Description",
    desc: `Fills elements of array with value from start up to, but not including, end.`,
    title2: "Argument",
    argument: `<strong>array (Array):</strong>   The array to fill.<br>
   <strong> [size=1] (number):</strong>  The value to fill array with.`,
    title3: "Returns",
    return: "<strong>(Array):</strong> Returns array.",
    title4: "Exemple",
    exemple: "./photo/fill.png",
    id: "fill",
  },
  {
    function: "_.findIndex(array, [predicate=_.identity], [fromIndex=0])",
    title1: "Description",
    desc: `This method is like _.find except that it returns the index of the first element predicate returns truthy for instead of the element itself.`,
    title2: "Argument",
    argument: `<strong>array (Array):</strong>  The array to aspect.<br>
   <strong> [size=1] (number):</strong>  The function invoked per iteration`,
    title3: "Returns",
    return:
      "<strong>(Array):</strong> Returns the index of the found element, else -1.",
    title4: "Exemple",
    exemple: "./photo/findindex.png",
    id: "findIndex",
  },
  {
    function:
      "_.findLastIndex(array, [predicate=_.identity], [fromIndex=array.length-1])",
    title1: "Description",
    desc: `This method is like _.findIndex except that it iterates over elements of collection from right to left.`,
    title2: "Argument",
    argument: `<strong>array (Array):</strong>  The array to query.<br>
   <strong> [size=1] (number):</strong>  The function invoked per iteration`,
    title3: "Returns",
    return:
      "<strong>(Array):</strong>   Returns the index of the found element, else -1.",
    title4: "Exemple",
    exemple: "./photo/findlastindex.png",
    id: "findLastIndex",
  },
  {
    function: "_.flatten(array)",
    title1: "Description",
    desc: `Flattens array a single level deep.`,
    title2: "Argument",
    argument: `<strong>array (Array):</strong> The array to flatten.`,
    title3: "Returns",
    return: "<strong>(Array):</strong>  Returns the new flattened array.",
    title4: "Exemple",
    exemple: "./photo/flatten.png",
    id: "flatten",
  },
  {
    function: "_.flattenDeep(array)",
    title1: "Description",
    desc: `Recursively flattens array.`,
    title2: "Argument",
    argument: `<strong>array (Array):</strong>  The array to query.`,
    title3: "Returns",
    return: "<strong>(Array):</strong>   RReturns the new flattened array.",
    title4: "Exemple",
    exemple: "./photo/flattendip.png",
    id: "flattenDeep",
  },
  {
    function: "_.flattenDepth(array, [depth=1])",
    title1: "Description",
    desc: `Recursively flatten array up to depth times.`,
    title2: "Argument",
    argument: `<strong>array (Array):</strong>  The array to query. <br>
    <strong>array (Array):</strong>  The maximum recursion depth.`,
    title3: "Returns",
    return: "<strong>(Array):</strong> Returns the new flattened array. ",
    title4: "Exemple",
    exemple: "./photo/flattendepth.png",
    id: "flattenDepth",
  },
  {
    function: "_.fromPairs(pairs)",
    title1: "Description",
    desc: `The inverse of _.toPairs; this method returns an object composed from key-value pairs.`,
    title2: "Argument",
    argument: `<strong>array (Array):</strong>  The key-value pairs.`,
    title3: "Returns",
    return: "<strong>(Array):</strong>  Returns the new object.",
    title4: "Exemple",
    exemple: "./photo/frompair.png",
    id: "fromPairs",
  },
  {
    function: "_.head(array)",
    title1: "Description",
    desc: `Gets the first element of array.`,
    title2: "Argument",
    argument: `<strong>array (Array):</strong>  The array to query.`,
    title3: "Returns",
    return: "<strong>(Array):</strong> Returns the first element of array.",
    title4: "Exemple",
    exemple: "./photo/head.png",
    id: "head",
  },
  {
    function: "_.indexOf(array, value, [fromIndex=0])",
    title1: "Description",
    desc: `Gets the first element of array.`,
    title2: "Argument",
    argument: `<strong>array (Array):</strong> The array to inspect.<br>
    strong>array (Array):</strong>  The value to search for.<br>
    strong>array (Array):</strong>  The index to search from.`,
    title3: "Returns",
    return:
      "<strong>(Array):</strong>Returns the index of the matched value, else -1.",
    title4: "Exemple",
    exemple: "./photo/indexof.png",
    id: "indexOf",
  },
];

const array = [
  { link: "#chunk", value: "_.chunk" },
  { link: "#compact", value: "_.compact" },
  { link: "#concat", value: "_.concat" },
  { link: "#difference", value: "_.difference" },
  { link: "#differenceBy", value: "_.differenceBy" },
  { link: "#differenceWith", value: "_.differenceWith" },
  { link: "#drop", value: "_.drop" },
  { link: "#dropRight", value: "_.dropRight" },
  { link: "#dropRightWhile", value: "_.dropRightWhile" },
  { link: "#dropWhile", value: "_.dropWhile" },
  { link: "#fill", value: "_.fill" },
  { link: "#findIndex", value: "_.findIndex" },
  { link: "#findLastIndex", value: "_.findLastIndex" },
  { link: "#flatten", value: "_.flatten" },
  { link: "#flattenDeep", value: "_.flattenDeep" },
  { link: "#flattenDepth", value: "_.flattenDepth" },
  { link: "#fromPairs", value: "_.fromPairs" },
  { link: "#head", value: "_.head" },
  { link: "#indexOf", value: "_.indexOf" },
];

// const collections = [
//   { link: "#bibi", value: "_.bibi" },
//   { link: "#cc", value: "_.dd" },
//   { link: "#zz", value: "_.zz" },
//   { link: "#tt", value: "_.tt" },
//   { link: "#bibi", value: "_.bibi" },
//   { link: "#cc", value: "_.dd" },
//   { link: "#zz", value: "_.zz" },
//   { link: "#tt", value: "_.tt" },
//   { link: "#bibi", value: "_.bibi" },
//   { link: "#cc", value: "_.dd" },
//   { link: "#zz", value: "_.zz" },
//   { link: "#tt", value: "_.tt" },
//   { link: "#bibi", value: "_.bibi" },
//   { link: "#cc", value: "_.dd" },
//   { link: "#zz", value: "_.zz" },
//   { link: "#tt", value: "_.tt" },
// ];
